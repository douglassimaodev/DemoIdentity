// <auto-generated />
using System;
using DemoIdentity.IdentityIsolated.ContextConfiguration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DemoIdentity.Presentation.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190119223910_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.AppClaim", b =>
                {
                    b.Property<long>("AppClaimId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanEdit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("AppClaimId");

                    b.ToTable("SecurityAppClaim");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("EndedBy");

                    b.Property<DateTime?>("EndedOn");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("SecurityRole");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleClaimId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("EndedBy");

                    b.Property<DateTime?>("EndedOn");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("SecurityRoleClaim");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long?>("EndedBy");

                    b.Property<DateTime?>("EndedOn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("SecurityUser");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserClaimId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("EndedBy");

                    b.Property<DateTime?>("EndedOn");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityUserClaim");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("SecurityUserLogin");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("EndedBy");

                    b.Property<DateTime?>("EndedOn");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SecurityUserRole");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUserToken", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("SecurityUserToken");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ClaimGroup", b =>
                {
                    b.Property<long>("ClaimGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanEdit");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<int>("InPosition");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("ParentClaimGroupId");

                    b.HasKey("ClaimGroupId");

                    b.HasIndex("ParentClaimGroupId");

                    b.ToTable("SecurityClaimGroup");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ClaimInClaimGroup", b =>
                {
                    b.Property<long>("ClaimInClaimGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AppClaimId");

                    b.Property<long>("ClaimGroupId");

                    b.HasKey("ClaimInClaimGroupId");

                    b.HasIndex("AppClaimId");

                    b.HasIndex("ClaimGroupId");

                    b.ToTable("SecurityClaimInClaimGroup");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ClaimInRole", b =>
                {
                    b.Property<long>("ClaimInRoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AppClaimId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<long>("RoleId");

                    b.Property<int>("Status");

                    b.HasKey("ClaimInRoleId");

                    b.HasIndex("AppClaimId");

                    b.HasIndex("RoleId");

                    b.ToTable("SecurityClaimInRole");
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUserClaim", b =>
                {
                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUserLogin", b =>
                {
                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ApplicationUserToken", b =>
                {
                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ClaimGroup", b =>
                {
                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ClaimGroup", "ParentClaimGroup")
                        .WithMany("ChildrenClaimGroup")
                        .HasForeignKey("ParentClaimGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ClaimInClaimGroup", b =>
                {
                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.AppClaim", "AppClaim")
                        .WithMany()
                        .HasForeignKey("AppClaimId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ClaimGroup", "ClaimGroup")
                        .WithMany("ClaimInClaimGroups")
                        .HasForeignKey("ClaimGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DemoIdentity.IdentityIsolated.Entities.ClaimInRole", b =>
                {
                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.AppClaim", "AppClaim")
                        .WithMany()
                        .HasForeignKey("AppClaimId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DemoIdentity.IdentityIsolated.Entities.ApplicationRole", "ApplicationRole")
                        .WithMany("ClaimsInRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
